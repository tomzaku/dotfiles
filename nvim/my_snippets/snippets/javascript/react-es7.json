{
  "exportType": {
    "body": ["export type ${1:first} = {${2:second}}"],
    "prefix": "exptp"
  },
  "exportInterface": {
    "prefix": "expint",
    "body": ["export interface ${1:first} {${2:second}}"]
  },
  "typescriptReactFunctionalExportComponent": {
    "prefix": "tsrfce",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },
  "typescriptReactFunctionalComponent": {
    "prefix": "tsrfc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },
  "typescriptReactArrowFunctionExportComponent": {
    "prefix": "tsrafce",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "typescriptReactArrowFunctionComponent": {
    "prefix": "tsrafc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "typescriptReactNativeArrowFunctionComponent": {
    "prefix": "tsrnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system in TypeScript"
  },
  "typescriptReactNativeArrowFunctionComponentWithStyles": {
    "prefix": "tsrnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet"
  },
  "reactArrowFunctionComponent": {
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactArrowFunctionExportComponent": {
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactFunctionMemoComponent": {
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(() => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system"
  },
  "reactFunctionalComponentRedux": {
    "prefix": "rfcredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React functional component with connected redux and ES7 module system"
  },
  "reactFunctionalComponentReduxPropTypes": {
    "prefix": "rfcreduxp",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ${2:second}: PropTypes.${3:third}",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system"
  },
  "reactFunctionalComponentWithPropTypes": {
    "prefix": "rfcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": ["console.assert(${1:first}, ${2:second})"],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": ["console.clear()"],
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": ["console.count(${1:first})"],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": ["console.dir(${1:first})"],
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": ["console.error(${1:first})"],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": ["console.group('${1:first}')"],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": ["console.groupEnd()"],
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": ["console.trace(${1:first})"],
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": ["console.log('${1:first}', ${1:first})"],
    "description": "Logs property with name."
  },
  "consoleLogJson": {
    "prefix": "clj",
    "body": ["console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"],
    "description": "Logs stringified JSON property with name."
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": ["console.time('${1:first}')"],
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": ["console.timeEnd('${1:first}')"],
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": ["console.warn(${1:first})"],
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": ["console.info(${1:first})"],
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "consoleTable": {
    "prefix": "ctl",
    "body": ["console.table([${1:first}])"],
    "description": "Logs table to console"
  },
  "useCallback": {
    "prefix": "useCallbackSnippet",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ]
  },
  "useContext": {
    "prefix": "useContextSnippet",
    "body": ["const ${1:first} = React.useContext(${2:second})"]
  },
  "useEffect": {
    "prefix": "useEffectSnippet",
    "body": [
      "React.useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ]
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ]
  },
  "useMemo": {
    "prefix": "useMemoSnippet",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"]
  },
  "useReducer": {
    "prefix": "useReducerSnippet",
    "body": [
      "const [state, dispatch] = React.useReducer(${1:first}, ${2:second}, ${3:third})"
    ]
  },
  "useRef": {
    "prefix": "useRefSnippet",
    "body": ["const ${1:first} = React.useRef(${2:second})"]
  },
  "useState": {
    "prefix": "useStateSnippet",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = React.useState(${2:second})"
    ]
  },
  "importAs": {
    "prefix": "ima",
    "body": ["import { ${2:second} as ${3:third} } from '${1:first}'"]
  },
  "importBrowserRouter": {
    "prefix": "imbr",
    "body": ["import { BrowserRouter as Router } from 'react-router-dom'"]
  },
  "importBrowserRouterWithRouteAndNavLink": {
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
      ""
    ]
  },
  "importDestructing": {
    "prefix": "imd",
    "body": ["import { ${2:second} } from '${1:first}'"]
  },
  "importEverything": {
    "prefix": "ime",
    "body": ["import * as ${2:second} from '${1:first}'"]
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": ["import '${1:first}'"]
  },
  "importPropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types'"]
  },
  "importReact": {
    "prefix": "imr",
    "body": ["import React from 'react'"]
  },
  "importReactDom": {
    "prefix": "imrd",
    "body": ["import ReactDOM from 'react-dom'"]
  },
  "importReactWithComponent": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'"]
  },
  "importReactWithComponentAndPropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "importReactWithMemo": {
    "prefix": "imrm",
    "body": ["import React, { memo } from 'react'"]
  },
  "importRouterLink": {
    "prefix": "imbrl",
    "body": ["import { Link } from 'react-router-dom'"]
  },
  "importRouterNavLink": {
    "prefix": "imbrnl",
    "body": ["import { NavLink } from 'react-router-dom'"]
  },
  "importRouterSetup": {
    "prefix": "imbrc",
    "body": ["import { Route, Switch, NavLink, Link } from 'react-router-dom'"]
  },
  "importRouterSwitch": {
    "prefix": "imbrs",
    "body": ["import { Switch } from 'react-router-dom'"]
  },
  "import": {
    "prefix": "imp",
    "body": ["import ${2:second} from '${1:first}'"]
  },
  "reactNativeFunctionalComponent": {
    "prefix": "rnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}"
    ]
  },
  "reactNativeFunctionalComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ]
  },
  "reactNativeFunctionalExportComponent": {
    "prefix": "rnfe",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "rnfes",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ]
  },
  "reactNativeImport": {
    "prefix": "imrn",
    "body": ["import { ${1:first} } from 'react-native'"]
  },
  "reactNativePureComponent": {
    "prefix": "rnpc",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ]
  },
  "reactNativePureComponentExport": {
    "prefix": "rnpce",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "reactNativeStyles": {
    "prefix": "rnstyle",
    "body": ["const styles = StyleSheet.create({${1:first}})"]
  },
  "importReduxConnect": {
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'"]
  },
  "reduxAction": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:first} = (payload) => ({",
      "  type: ${2:second},",
      "  payload",
      "})",
      ""
    ]
  },
  "reduxConst": {
    "prefix": "rxconst",
    "body": ["export const ${1:first} = '${1:first}'"]
  },
  "reduxReducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "  switch (type) {",
      "",
      "  case ${1:first}:",
      "    return { ...state, ...payload }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ]
  },
  "reduxSelector": {
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:first} = state => state.${2:second}"
    ]
  },
  "reduxSlice": {
    "prefix": "rxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: ${2:second},",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ]
  },
  "mappingToProps": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}"
    ]
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('${1:first}', () => { ${2:second} })"],
    "description": "Testing `describe` block"
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": ["it('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing asynchronous `it` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": ["it('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `it` block"
  },
  "setupReactComponentTestWithRedux": {
    "prefix": "srtest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Create test component"
  },
  "setupReactNativeTest": {
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ]
  },
  "setupReactNativeTestWithRedux": {
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ]
  },
  "setupReactTest": {
    "prefix": "stest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ]
  },
  "testAsyncBlock": {
    "prefix": "testa",
    "body": ["test('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing `asynchronous test` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": ["test('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `test` block"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": ["export default ${1:first}"]
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": ["export { ${2:second} } from '${1:first}'"]
  },
  "exportAs": {
    "prefix": "exa",
    "body": ["export { ${2:second} as ${3:third} } from '${1:first}'"]
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": ["export const ${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Export named function"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": ["export default (${1:first}) => {${2:second}}"],
    "description": "Export default function"
  },
  "exportDefaultNamedFunction": {
    "prefix": "ednf",
    "body": ["export default function ${1:first}(${2:second}) {${3:third}}"],
    "description": "Export default named function"
  },
  "method": {
    "prefix": "met",
    "body": ["${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Creates a method inside a class"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": ["get ${1:first}() {", "  return this.${2:second}", "}"],
    "description": "Creates a getter property inside a class"
  },
  "propertySet": {
    "prefix": "pse",
    "body": ["set ${1:first}(${2:second}) {${3:third}}"],
    "description": "Creates a setter property inside a class"
  },
  "forEach": {
    "prefix": "fre",
    "body": ["${1:first}.forEach(${2:second} => {${3:third}})"],
    "description": "Creates a forEach statement"
  },
  "forOf": {
    "prefix": "fof",
    "body": ["for(let ${1:first} of ${2:second}) {${3:third}}"],
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": ["for(let ${1:first} in ${2:second}) {${3:third}}"],
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": ["(${1:first}) => { ${2:second} }"],
    "description": "Creates an anonymous function"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": ["const ${1:first} = (${2:second}) => { ${3:third} }"],
    "description": "Creates a named function"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": ["const {${2:second}} = ${1:first}"],
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": ["const [${2:second}] = ${1:first}"],
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": ["setInterval(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function at specified intervals"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": ["setTimeout(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function after the specified delay"
  },
  "promise": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => { ${1:first} })"],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },
  "createContext": {
    "prefix": "rcontext",
    "body": ["const ${1:first} = React.createContext()"],
    "description": "Create React context"
  },
  "createRef": {
    "prefix": "cref",
    "body": ["this.${1:first}Ref = React.createRef()"],
    "description": "Create ref statement used inside constructor"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": ["this.${1:first} = this.${1:first}.bind(this)"],
    "description": "Binds this to a method"
  },
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      ""
    ]
  }
}
