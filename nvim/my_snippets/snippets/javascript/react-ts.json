{
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <>${1:first}</>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React functional component without PropTypes"
  },
  "jsx element": {
    "prefix": "<",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "<",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx elements map": {
    "prefix": "jm",
    "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
    "description": "an element self closed"
  },
  "jsx element wrap selection": {
    "prefix": "jsx wrap selection with element",
    "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
    "description": "an element"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:val}, set${2:setterName}] = React.useState(${3:defVal})",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": ["React.useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
    "description": "React useEffect() hook"
  },
  "useEffect with cleanup": {
    "prefix": "uec",
    "body": [
      "React.useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with a cleanup function"
  },
  "createContext": {
    "prefix": "cc",
    "body": [
      "export const $1 = createContext<$2>(",
      "\t(null as any) as $2",
      ")"
    ],
    "description": "creates a react context"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
	"describeBlock": {
    "prefix": "desc",
    "body": [
      "describe('$1', () => {",
      "  $0",
      "})",
      ""
    ],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": [
      "test('should $1', () => {",
      "  $0",
      "})",
      ""
    ],
    "description": "Testing `test` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": [
      "it('should $1', () => {",
      "  $0",
      "})",
      ""
    ],
    "description": "Testing `it` block"
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": [
      "it('should $1', async () => {",
      "  $0",
      "})",
      ""
    ],
    "description": "Testing async `it` block"
  }
}
